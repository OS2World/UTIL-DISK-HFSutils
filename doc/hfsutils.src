þtext
===============================================================================
== hfsutils for DOS, Windows and OS/2                           Version 3.1a ==
===============================================================================
þendtext

þtitle hfsutils for DOS, Windows and OS/2

þformat bold hfsutils emx RSX
þformat bold hmount hvol hls hdir hcopy hdel hrename
þformat bold hattrib hcd hpwd hmkdir hrmdir hformat

þformat tty hfs.cfg AUTOEXEC.BAT CONFIG.SYS
þformat tty A: +i +l
þformat tty -1 -a -b -c -d -f -i -l -m -q -r -s -t -w
þformat tty -C -F -N -Q -R -S -U

þspecial text _OS DOS
þspecial text A_OS A DOS
þspecial text a_OS a DOS

þspecial ipf _OS DOS
þspecial ipf A_OS A DOS
þspecial ipf a_OS a DOS

þif text
þh= Table of Contents
þtoc
þendif


þh1 Introduction

hfsutils is a collection of tools for accessing Macintosh
HFS-formatted volumes. HFS is the þsl{Hierarchical File System}
used on modern Macintosh computers.

The utilities were originally part of the hfsutils package for UNIX
systems. This port uses the emx programming environment. There are
binary versions for OS/2 and Windows 95/NT. Both versions also run
under DOS.

hfsutils is free software, distributed under the GNU General Public
License. Please see the file `þtt{COPYING}' for details.


þh1 Installing hfsutils

þipfminitoc

þh2 System requirements

hfsutils requires a 386 processor or better. Supported operating
systems are DOS version 3 and higher, OS/2 2.0 and higher, and Win32
(Windows 95/NT).


þh2 Additional software

In order to use hfsutils under Windows 95/NT in native mode, you need
the RSXNT extender. This package is available as 
þexample
ftp://ftp.uni-bielefeld.de/pub/systems/msdos/misc/rsxnt131.zip
þendexample

For OS/2, you need the emx runtime environment, available as
þexample
ftp://ftp.leo.org/pub/comp/os/os2/leo/devtools/gnu/emx+gcc/emxrt.zip
þendexample
Only the OS/2 parts of the runtime need to be installed, as hfsutils
uses rsx under DOS.


þh2 Installation instructions

These are the steps for installing hfsutils.
þenumerate
þitem
Set the HOME environment variable to point to a directory where
hfsutils can store the file `þtt{hfs.cfg}'. This can be done by adding
a line like
þexample
SET HOME=C:\HFSUTILS
þendexample
to the AUTOEXEC.BAT file (DOS and Windows95) or the
CONFIG.SYS file (OS/2). Under Windows NT, environment
variables are set in the `System' settings of the Control Panel.
Note that the directory has to be writable.

þitem
Add the directory where you put hfsutils to your PATH. If you want to
avoid this, you can set the HFSUTILS variable to point to this
directory instead.

þendenumerate


þh1 Using the utilities

In this section, the term `DOS' refers to the PC environment (as
opposed to the Macintosh environment). This includes plain DOS, OS/2
and Windows 95/NT.

þipfminitoc

þh2 hmount - introduce a new HFS volume and make it current
þlabel hmount

þindent
  þsy{hmount <source-path> [<partition-no>]}
þendindent

hmount is used to introduce a new HFS volume. A_OS pathname to the
volume's source must be specified. The source may be a drive letter or
a regular file containing an HFS volume image.

If the source medium is partitioned, one partition must be selected to be
mounted. If there is only one HFS partition on the medium, it will be selected
by default. Otherwise, the desired partition number must be specified (as the
ordinal þsl{n}th partition) on the command-line. Partition number 0
can be specified to refer to the entire medium, ignoring what might otherwise
be perceived as a partition map, although in practice this is probably only
useful if you want this command to fail when the medium is partitioned.

The mounted volume becomes "current" so subsequent commands will refer to it.
The current working directory for the volume is set to the root of the volume.
This information is kept in a file named `þtt{hfs.cfg}' in the
 þhpt{home directory}. 

If the source medium is changed (e.g. floppy or CD-ROM disc exchanged)
after hmount has been called, subsequent HFS commands will fail until
the original medium is replaced or a different volume is made
current. To use the same source path with the different medium,
reissue the hmount command.

Examples:

þexample
hmount A:
þendexample
If a Macintosh floppy disk is available as A:, this command makes the
floppy current for other HFS commands such as þhpt{hls}, þhpt{hcd},
 þhpt{hcopy}, etc. 

þexample
hmount macdisk.bin
þendexample
Mounts a volume that resides in the file `þtt{macdisk.bin}'.


þh2 humount - remove an HFS volume from the list of known volumes
þlabel humount

þindent
  þsy{hmount [<volume-name-or-path>]}
þendindent

humount is used to forget about an HFS volume previously mounted with
 þhpt{hmount}. Either the volume's name or the path to the volume may
be used to specify the volume. If no name or path is given, the
current volume is assumed.

It is not strictly necessary to use this command. It does not affect
any physical volumes; it only updates the file named `þtt{hfs.cfg}' in
the þhpt{home directory} used to keep track of the currently known HFS
volumes.


þh2 hvol - display or change the current HFS volume
þlabel hvol

þindent
  þsy{hvol [<volume-or-path>]}
þendindent

With no arguments, hvol displays the name and path to the "current"
HFS volume as well as the names and paths of all previously mounted
("known") volumes.

With an argument, hvol changes the current volume to be the one
specified. Either the name of the volume or the path to its source can
be specified. The volume must have been previously mounted using
 þhpt{hmount}.

A separate "current working directory" is maintained for each mounted volume.
This information is kept in a file named `þtt{hfs.cfg}' in the þhpt{home
directory}.


þh2 hls - list files in an HFS directory
þlabel hls

þindent
  þsy{hls [<options>] [<hfs-path> ...]}
þendindent

hls lists files and directories contained in an HFS volume. If one or
more arguments are given, each specified file or directory is shown;
otherwise, the contents of the current working directory are shown.

Options:

þdescription
þitem -1

Output is formatted such that each entry appears on a single
line. This is the default when the standard output is redirected to a
file or pipe.

þitem -a

All files and directories are shown, including "invisible" files, as
would be perceived by the Macintosh Finder. Normally invisible files
are omitted from directory listings.

þitem -b
Special characters are displayed in an escaped backslash
notation. Normally special or non-printable characters in filenames
are replaced by a question mark (þtt{?}).

þitem -c

Sort and display entries by their creation date, rather than their
modification date.

þitem -d

List directory entries themselves rather than their contents. Normally
the contents are shown for named directories on the command-line.

þitem -f

Do not sort directory contents; list them in the order they appear in the
directory. This option effectively enables -a and -U and disables -l, -s, and
-t.

þitem -i

Show the catalog IDs for each entry. Every file and directory on an HFS volume
has a unique catalog ID.

þitem -l
Display entries in long format. This format shows the entry type ("d" for
directory or "f" for file), flags ("i" for invisible), file type and creator
(four-character strings for files only), size (number of directory
sub-contents or file resource and data bytes, respectively), date of last
modification (or creation, with -c flag), and pathname. Macintosh "locked"
files are indicated by "F" in place of "f".

þitem -m

Display entries in a continuous format separated by commas.

þitem -q

Replace special and non-printable characters in displayed filenames with
question marks (þtt{?}). This is the default when the standard output
is connected to a terminal (as opposed to a file or pipe).

þitem -r

Sort entries in reverse order before displaying.

þitem -s

Show the file size for each entry in 1K block units. The size includes blocks
used for both data and resource forks.

þitem -t

Sort and display entries by time. Normally files will be sorted by name. This
option uses the last modification date to sort unless -c is also specified.

þitem -x

Display entries in column format like -C, but sorted horizontally into rows
rather than columns.

þitem -w þsy{<width>}

Format output lines suitable for display in the given þsy{<width>}.
Normally the width will be determined from your terminal, from the environment
variable COLUMNS, or from a default value of 80.

þitem -C

Display entries in column format with entries sorted vertically. This is the
default output format when standard output is connected to a terminal.

þitem -F

Cause certain output filenames to be followed by a single-character flag
indicating the nature of the entry; directories are followed by a colon (:)
and executable Macintosh applications are followed by an asterisk (*).

þitem -N

Cause all filenames to be output verbatim without any escaping or
question-mark substitution.

þitem -Q

Cause all filenames to be enclosed within double-quotes (") and
special/non-printable characters to be properly escaped.

þitem -R

For each directory that is encountered in a listing, recursively descend into
and display its contents.

þitem -S

Sort and display entries by size. For files, the combined resource and data
lengths are used to compute a file's size.

þitem -U

Do not sort directory contents; list them in the order they appear in the
directory. On HFS volumes, this is usually an alphabetical case-insensitive
ordering, although there are some idiosyncrasies to the Macintosh
implementation of ordering. This option does not affect -a, -l, or -s.

þenddescription

þh2 hdir - display an HFS directory in long format
þlabel hdir

þindent
  þsy{hdir [<options>] [<hfs-path> ...]}
þendindent

hdir is an alternative interface to hls. It is equivalent to supplying
hls the -l flag.


þh2 hcopy - copy files from or to an HFS volume
þlabel hcopy

þindent
  þsy{hcopy [-m | -b | -t | -r | -a] <source-path> [...] <target-path>}
þendindent

hcopy transfers files from an HFS volume to _OS or vice versa. The
named source files are copied to the named destination target, which
must be a directory if multiple files are to be copied.

Copies are performed using a translation mode, which must be one of:

þdescription

þitem -m

 þbf{MacBinary II}:
A popular format for binary file transfer. Both forks of the Macintosh file
are preserved. This is the recommended mode for transferring arbitrary
Macintosh files.

þitem -b

 þbf{BinHex}:
An alternative format for ASCII file transfer. Both forks of the Macintosh
file are preserved.

þitem -t

 þbf{Text}:
Performs end-of-line translation. Only the data fork of the Macintosh file is
copied.

þitem -r

 þbf{Raw Data}:
Performs no translation. Only the data fork of the Macintosh file is copied.

þitem -a

 þbf{Automatic}:
A mode will be chosen automatically for each file based on a set of predefined
heuristics.

þenddescription

If no mode is specified, -a is assumed.

If a_OS source pathname is specified as a single dash (þtt{-}), hcopy will
copy from standard input to the HFS destination. Likewise, a single
dash used as a_OS destination pathname will cause hcopy to copy the
HFS source to standard output.

Copied files may have their filenames altered during translation. For example,
an appropriate file extension may be added or removed, and certain other
characters may also be transliterated.

The destination target must not be ambiguous; that is, it must be
obvious whether the target is on the _OS filesystem or on an HFS
volume. As a rule, HFS targets must contain at least one colon (:),
usually as the beginning of a relative pathname or by itself to
represent the current working directory.  As a special exception, if
the target pathname start with a drive letter, it will be assumed to
be on the _OS filesystem. To make a_OS target unambiguous, either use
an absolute pathname or precede a relative pathname with a dot and
slash (þtt{./}).


þh2 hdel - delete both forks of an HFS file
þlabel hdel

þindent
  þsy{hdel <hfs-path> [...]}
þendindent

hdel deletes files from the current HFS volume. Both forks (resource
and data) of each named file are removed, freeing space for other files.


þh2 hrename - rename or move an HFS file or directory
þlabel hrename

þindent
  þsy{hrename <hfs-src-path> [...] <hfs-target-path>}
þendindent

hrename changes the name and/or location of one or more files or
directories. If only one source path is specified and the target path
is in the same directory as the source, only the name is
changed. Otherwise the source object is moved as well as possibly
being renamed.

If multiple source paths are specified, the target must be a directory, and
all of the source objects will be moved into it (keeping the same names.)

If the source path refers to the root directory of a volume, the volume name
will be changed. The root directory cannot be moved. Note that volume names
can only have 1-27 characters, while all other names may have 1-31 characters.


þh2 hattrib - change HFS file or directory attributes
þlabel hattrib

þindent
  þsy{hattrib [-t TYPE] [-c CREA] [-|+i] [-|+l] <hfs-path> [...]}
þendindent

hattrib permits the alteration of HFS file attributes. The
MacOS-defined þsl{type} and þsl{creator} attributes can be set using
the -t and -c flags, respectively. A file's þsl{invisible} flag can be
set or cleared with +i and -i, respectively. Finally, a file's
 þsl{locked} flag can be set or cleared with +l and -l.

All files mentioned on the command line will receive the specified attributes,
regardless of the file's current attributes. Any attribute not mentioned in
the command line is left unchanged.

Note that the þsl{invisible} and þsl{locked} flags only have meaning
to the Macintosh Finder.


þh2 hcd - change working HFS directory
þlabel hcd

þindent
  þsy{hcd [<hfs-path>]}
þendindent

hcd is used to change the notion of the "current working directory" for the
current HFS volume. All subsequent HFS commands will interpret filenames
relative to this directory, unless absolute pathnames are used.

If the argument pathname is omitted, hcd will change to the root of
the current volume.

 þbf{Note:} Although absolute pathnames can be given to hcd, the full
pathname must match the current volume; it cannot specify a path for 
a different volume. Use þhpt{hvol} or þhpt{hmount} to change the
current volume. (Each volume has its own independent current working
directory.)


þh2 hpwd - print the full path of the current HFS working directory
þlabel hpwd

þindent
  þsy{hpwd}
þendindent

hpwd displays the complete (absolute) HFS pathname to the current
working directory on the current volume. The current working directory
can be changed with the þhpt{hcd} command.


þh2 hmkdir - create a new HFS directory
þlabel hmkdir

þindent
  þsy{hmkdir <hfs-path> [...]}
þendindent

hmkdir creates new, empty directories (folders) on the current HFS
volume. There must not already be a file or directory with each named
path.


þh2 hrmdir - remove an empty HFS directory
þlabel hrmdir

þindent
  þsy{hrmdir <hfs-path> [...]}
þendindent

hrmdir deletes directories (folders) from the current HFS volume. Each named
directory must already be empty.


þh2 hformat - create a new HFS filesystem and make it current
þlabel hformat

þindent
  þsy{hformat [-l <label>] <destination-path> [<partition-no>]}
þendindent

hformat is used to write a new HFS filesystem to a volume. A_OS
pathname to the volume's destination must be specified. The
destination may be either a drive letter or a regular file, but must
already exist and be writable. (If a regular file, the size of the
file determines the maximum size of the resulting volume image.) Note
that the medium must already be low-level formatted. To format a new,
unformatted diskette with hformat, format it with the usual FORMAT
utility first.

An optional label can be specified to name the volume. The name must be
between 1-27 characters and cannot contain a colon (:). By default, the volume
will be named þtt{Untitled}.

If a partition number þsl{n} is specified, the þsl{n}th HFS partition
in the existing medium will receive the filesystem. By default, and
also when þsl{n} is 0, the entire medium will be formatted with the
new filesystem. If a partition is specified, it must already exist.

The new volume will be empty, but will also become "current" so subsequent
commands will refer to it. The current working directory for the volume is set
to the root of the volume.


þh1 Usage notes

þipfminitoc

þh2 HFS pathnames

HFS pathnames consist of colon-separated components. Unlike _OS
pathnames, an HFS path which begins with a colon is a
 þsl{relative} path, and one which does not is an þsl{absolute}
path. As sole exception to this rule, a path not containing any colons
is assumed to be relative. Thus þtt{:Foo:Bar} is a relative path,
while þtt{Foo:Bar} is an absolute path.

Absolute pathnames always begin with the name of the volume
itself. Any occurrence of two or more consecutive colons in a path
causes resolution of the path to ascend into parent directories.


þh2 Wildcard expansion
þlabel Wildcard expansion

The utilities allow using the wildcard characters `þtt{*}' and `þtt{?}' to
specify filenames. However, the meaning of these characters is
somewhat more complicated than in most _OS programs. The reason is
that wildcard expansion is performed twice, for local files and for
files on the HFS volume.

The first expansion is similar to that used in UNIX systems. Any
arguments that contain wildcards will be replaced with a list of the
matching filenames þsl{in the native file system}. If no files match
the wildcard pattern, the wildcard argument is kept
unchanged. Moreover, wildcards within double quotes will not be
expanded.

The second expansion is similar, but matches files on the HFS volume.
It starts with the results of the first wildcard expansion, and
applies only to arguments that specify HFS files. Therefore, any
wildcards for HFS file specifications must be protected from being
expanded in the first step by double quotes.

In the expansion of HFS filenames, the backslash character may be used
to quote a single character. This makes it possible to specify HFS
filenames that contain special characters such as `þtt{*}' and
`þtt{?}'.

Some common examples follow.
þitemize
þitem
To list all filenames on the current HFS volume that begin with
`þtt{foo}':
þexample
hls "foo*"
þendexample
Note that the double quotes are necessary to prevent the `þtt{*}' to
be expanded against the _OS files.

þitem
To copy all _OS files whose names end in `þtt{.c}' to the HFS volume:
þexample
hcopy *.c :
þendexample
Here the wildcard is expanded to a list of matching files in the
current directory.

þitem
To delete all files in the current directory on the HFS volume:
þexample
hdel "*"
þendexample
Alternatively, you can use:
þexample
hdel :*
þendexample
This works because the specification begins with a colon and hence
does not match any _OS files. Hence it is not expanded in the first
expansion.

þitem
To copy `þtt{myfile.txt}' to the HFS file `þtt{My*File}':
þexample
hcopy myfile.txt ":My*File"
þendexample
The asterisk needs to be protected from the expansion against _OS
files. Since hcopy does not perform any expansion for target files,
the asterisk should not be escaped by a backslash.

þitem
To copy the HFS file `þtt{My*File}' to the file `þtt{myfile}' in _OS:
þexample
hcopy ":My\*File" myfile
þendexample
The backslash ensures that the asterisk is not expanded in the second
expansion. The `þtt{:}' is not strictly necessary.

þenditemize


þh2 Environment variables

The utilities use the following environment variables:

þdescription

þitem HFSUTILS

Specifies the directory where the executable `þtt{hfsutil.exe}' and
the extender `þtt{rsxhfs.exe}' reside. These files are first looked
for in the current directory, then in the directories listed in the
PATH variable, and finally in the directories specified in the
HFSUTILS variable.
 

þitem HOME
þlabel home directory

Specifies the "home directory" where the file `þtt{hfs.cfg}' will be
placed. This file records the volumes known to hfsutils. If this
variable is not set, the current directory will be used. Since
this causes problems when the current directory is changed, it is
recommended that this variable be used.

þenddescription


þh2 Notes for DOS users
þlabel dosnotes

þh- Supported devices

Under DOS, the utilities work with block devices such as floppy
disks. The device must be known to DOS and have a drive letter.
CD-ROMs can not be accessed, because they are not viewed as block
devices in DOS.


þh- DPMI

hfsutils requires a DPMI server. A server is included (the program
`þtt{CSXHFS.EXE}'). It will be loaded automatically if no other server
is present, and must be located either in the current directory or in
a directory listed in the HFSUTILS variable.


þh2 Notes for Windows95 users
þlabel win95notes

When running as a native Win32 application, hfsutils can only access
disk drives directly under Windows NT. For Windows95, you have to use
the RSX extender and run hfsutils as a DOS application. This is done
by running RSXHFS to load the utilities, as in the following example:
þexample
rsxhfs hcopy foo :macfoo
þendexample

Note that this limits the devices to those that are accessible under
plain DOS, i.e., diskettes. CD-ROMs and other devices work only in
native Win32 mode under Windows NT.


þh2 Using Macintosh diskettes

The PC hardware cannot handle 800k Macintosh diskettes. Therefore,
hfsutils can only access 1.44M HFS-formatted Macintosh diskettes. Note
that 400k and 800k Macintosh diskettes usually use an older file
system, MFS, which is not supported by this software either.


þh2 Known problems

þitemize
þitem 
Some hybrid CD-ROMs have incorrect volume size information, and
therefore the HFS part cannot be accessed with the normal method. This
problem has been circumvented under OS/2, but still remains in the
Win32 version.
þitem
There is currently no way to access devices such as SCSI hard disks,
which are not assigned a drive letter.
þenditemize


þh1 History of changes

þipfminitoc

þh2 Changes in version 3.1a

þitemize
þitem 
Upgraded to hfsutils 3.1. The most important changes in
this version are:
þitemize
þitem
A new block cache that greatly increases performance.
þitem
 þhpt{hmount} and other commands now properly handle relative
pathnames, even if the current directory changes.
þitem
Several bug fixes.
þenditemize
þitem 
OS/2 version: Fixed a problem with some hybrid CD-ROMs where the
HFS part could not be accessed. (The problem still remains in the
Win32 version.)
þenditemize


þh1 Credits

This port was done by Marcus Better þtt{<Marcus.Better@abc.se>}, and
all questions and bug reports should be sent to him.

The original hfsutils for UNIX systems was written by Robert
Leslie þtt{<rob@mars.org>}. That program can be found at
þexample
http://www.mars.org/home/rob/proj/hfs/
þendexample

This port was developed with OS/2 Warp version 4 using GNU C and the
emx development system by Eberhard Mattes
 þtt{<mattes@azu.informatik.uni-stuttgart.de>}.

hfsutils includes a modified version of the RSX extender by Rainer
Schnitker þtt{<rainer@mathematik.uni-bielefeld.de>}, who also wrote
RSXNT.

The package also includes the DPMI server CWSDPMI by Charles W
Sandmann þtt{<sandmann@clio.rice.edu>}. Source code for CWSDPMI is not
included, but can be obtained separately.


þh1 Contacting the author

This port was done by Marcus Better
 þtt{<Marcus.Better@abc.se>}. Comments, suggestions and bug reports
should be sent to him.

The latest version of this software can be obtained from
þexample
http://www.student.nada.kth.se/~f96-bet/hfsutils/
þendexample


þtext

--------------------------- END OF HFSUTILS.TXT -----------------------------
þendtext
